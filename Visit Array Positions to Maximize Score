# We declare two vars evenEnd and oddEnd. 
# At any nums[i], if it is even we can find the new evenEnd by taking the max
# of last evenEnd + nums[i] or last oddEnd + nums[i] - x
# Same we can also do for if the number is odd. 
# We will initialize the evenEnd and oddEnd based on if nums[0] is even or odd. 
# For reference: https://www.youtube.com/watch?v=pvz4qKwBySc

class Solution:
    def maxScore(self, nums: List[int], x: int) -> int:
        oddEnd, evenEnd = 0, 0
        if nums[0]%2 == 0:
            evenEnd = nums[0]
            oddEnd = nums[0]-x
        else:
            oddEnd = nums[0]
            evenEnd = nums[0]-x
        
        ans = 0
        for i in range(1, len(nums)):
            if nums[i]%2 == 0:
                evenEnd = max(evenEnd + nums[i], oddEnd + nums[i] - x)
            else:
                oddEnd = max(oddEnd + nums[i], evenEnd + nums[i] - x)
            ans = max(evenEnd, oddEnd)
    
        return ans
      
###############################################################

# We can use Backtracking and DP to solve this problem
class Solution:
    def maxScore(self, nums: List[int], x: int) -> int:
        def backtrack(i, prev):
            if i >= len(nums):
                return 0 
            take1, take2 = 0, 0
            if prev%2 == nums[i]%2:
                take = backtrack(i+1, nums[i]) + nums[i]
            else:
                take = backtrack(i+1, nums[i]) + nums[i]-x
            dontTake = backtrack(i+1, prev)
            return max(take, dontTake)
        
        return backtrack(1, nums[0]) + nums[0]
    
##################################################################

class Solution:
    def maxScore(self, nums: List[int], x: int) -> int:
        memo = {}
        def backtrack(i, prev):
            if (i, prev) in memo:
                return memo[(i, prev)]
            
            if i >= len(nums):
                return 0 
            take1, take2 = 0, 0
            if prev%2 == nums[i]%2:
                take = backtrack(i+1, nums[i]) + nums[i]
            else:
                take = backtrack(i+1, nums[i]) + nums[i]-x
            dontTake = backtrack(i+1, prev)
            memo[(i, prev)] = max(take, dontTake)
            return max(take, dontTake)
        
        return backtrack(1, nums[0]) + nums[0]
