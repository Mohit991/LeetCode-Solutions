# Direct solution but memeory limit exceeds.
class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        memo = {}
        def findCommon(i, j):
            if (i, j) in memo:
                return memo[(i, j)]
            
            if i >= len(str1):
                return str2[j: len(str2)]

            if j >= len(str2):
                return str1[i: len(str1)]
            
            if str1[i] == str2[j]:
                memo[(i, j)] = str1[i] + findCommon(i+1, j+1)  
                return memo[(i, j)]
            else:
                a = str1[i] + findCommon(i+1, j)  
                b = str2[j] + findCommon(i, j+1)
                memo[(i, j)] = a if len(a) < len(b) else b
                return memo[(i, j)]

        return findCommon(0, 0)
    
##########################################################################

# First find the longestCommonSequence(lcs). 
# Use the lcs to find shortestCommonSupersequence(scs)

class Solution:        
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        m, n = len(str1), len(str2)
        dp = [['' for i in range(n+1)] for j in range(m+1)]
        
        for i in range(1, m+1):
            for j in range(1, n+1):
                if str1[i-1] == str2[j-1]:
                    dp[i][j] = dp[i-1][j-1] + str1[i-1]
                else:
                    a = dp[i][j-1]
                    b = dp[i-1][j]
                    dp[i][j] = a if len(a) > len(b) else b
        
        lcs = dp[-1][-1]
        i, j, k = 0, 0, 0
        ssc = ''
        while k < len(lcs):
            if str1[i] != lcs[k]:
                ssc += str1[i]
                i += 1
            elif str2[j] != lcs[k]:
                ssc += str2[j]
                j += 1
            else:
                ssc += lcs[k]
                k += 1
                i += 1
                j += 1
        
        ssc += str1[i:len(str1)] + str2[j:len(str2)]
        return ssc
        
    

