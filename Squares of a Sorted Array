#We can divide the array into two parts. One part with all the positive numbers and one with the negative numbers. 
#The postive part here starts from newStart till the end
# The negative part starts from newStart-1 till the beginning(Because these are negative numbers)
# Then we simple take two pointers and use the merge two sorted lists algorithm and get the answer. 
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        newStart = 0
        while newStart < len(nums) and nums[newStart] < 0:
            newStart += 1
        
        res = []
        i, j = newStart-1, newStart
        while j < len(nums) and i >= 0:
            if -1*nums[i] < nums[j]:
                res.append(nums[i]*nums[i])
                i -= 1
            else:
                res.append(nums[j]*nums[j])
                j += 1
                
        while j < len(nums):
            res.append(nums[j]*nums[j])
            j += 1
        while i >= 0:
            res.append(nums[i]*nums[i])
            i -= 1
            
        return res
    
#########################################################################

#Take two pointers from both extreams. i starts from 0 and j start from len(nums) - 1. Create answer array of 
#size nums. Start filling the answer array from the end. num[i] squared of nums[j] squared, whichever is greater
#take that value and put it in ans and increment i or decrement j accordingly. 
# The crux over here is that the array is already sorted. We are comparing the first and last elements because
# after square these have the possibility of being the highest element. Both the extremes contain the max 
# element (after square ofc), so we are inserting these elements to the last of the new array to make it sorted.

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        ans = [0] * len(nums)
        i = 0
        j = len(nums) - 1
        
        for k in range(len(ans)-1, -1, -1):
            if nums[i] * nums[i] > nums[j] * nums[j]:
                ans[k] = nums[i] * nums[i] 
                i += 1
            else:
                ans[k] = nums[j] * nums[j] 
                j -= 1
        
        return ans
                
        
