class Solution {
    public int longestPalindrome(String s) {
        int ar[] = new int[58];
         for(int i=0;i<s.length();i++){
            ar[s.charAt(i)- 'A']++;
         }
        int len = 0;
        boolean odd = false;
        for(int i=0;i<ar.length;i++){
            if(ar[i]%2 != 0){
                len += ar[i] - 1;
                odd = true;
            } 
            else len += ar[i]; 
        }
        if(odd) return len+1;
        return len;
        
        
        // HashMap<Character,Integer> map=new HashMap<Character,Integer>();//Creating HashMap
        // for(int i=0;i<s.length();i++){
        //     if(map.containsKey(s.charAt(i))){
        //         int t = map.get(s.charAt(i));
        //         t++;
        //         map.put(s.charAt(i),t);
        //     }
        //     else{
        //         map.put(s.charAt(i),1);
        //     }
        // }
        // // System.out.println(map);
        // int len = 0;
        // int odd = 0;
        // for(Map.Entry<Character, Integer> entry : map.entrySet()){
        //     int x = entry.getValue();
        //     if(x%2==0){
        //         len += x;
        //     }
        //     else{
        //         odd = 1;
        //         x = x/2;
        //         x = x*2;
        //         len = len+x;
        //     }
        //     // System.out.println(len);
        // }
        // if(odd == 1) len++;
        // return 0;
        
    }
}
