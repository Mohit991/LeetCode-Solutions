class Solution:
    def minimumBuckets(self, hamsters: str) -> int:
        #Cornor case for string of length 1
        if len(hamsters) == 1:
            if hamsters[0] == '.':
                return 0
            else:
                return -1
            
        count = 0
        ham = [x for x in hamsters]
        
        #Processing the first index(0th index)
        if ham[0] == 'H':
            if ham[1] == '.':
                ham[1] = 'B'
                count += 1
            if ham[1] == 'H':
                return -1
        
        #Processing the indexes inbetween
        for i in range(1, len(ham)-1):
            if ham[i] == 'H':
                #If you already have a bucket on the left side, skip this hamster
                if ham[i-1] == 'B':
                    continue
                
                #If the next is empty, you can put a Bucket there
                if ham[i+1] == '.':
                    ham[i+1] = 'B' 
                    count += 1
                #If next is not empty ie next is also a hampster, lets go back
                else:
                    #If previous is also hampster then it is HHH, you can return -1
                    if ham[i-1] == 'H':
                        return -1
                    #If previous is not hampster then put a bucket there. 
                    else:
                        ham[i-1] = 'B'
                        count += 1
        
        #Processing the last index
        if ham[-1] == 'H':
            if ham[-2] == '.':
                count += 1
            if ham[-2] == 'H':
                return -1
                
        # print(ham)
        return count
        
