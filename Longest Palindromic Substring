class Solution {
    public String longestPalindrome(String s) {
          /*******Boundry Cases***********/
          if(s.length() == 0 || s.length() == 1) return s;
          /*******************************/
        
           
          int l = s.length(); 
          int pal[][] = new int[l][l];
          int start = 0; 
          int maxLength = 1; 
        
          /*******Base Case 1***********/
          for(int i=0; i<l; i++){
              pal[i][i] = 1; 
          }
        
           /*******Base Case 2***********/
          for (int i = 0; i < l - 1; ++i) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                pal[i][i + 1] = 1;
                start = i;
                maxLength = 2;
            }
          }
        
          /**********Calculation********/
          for(int k = 3; k<=l; k++){
              for(int i=0; i<l-k+1; i++){
                  int j = i + k - 1; 
                  if((pal[i+1][j-1] == 1) && (s.charAt(i) == s.charAt(j))){
                      pal[i][j] = 1;
                      if(k>maxLength){
                          maxLength = k;
                          start = i;
                      }
                  }
              }
          }
        
        return(s.substring(start, start+maxLength));
    }
} 
