class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        if (p and not q) or (not p and q) or (p.val != q.val):
            return False
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
    
#####################################################################

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        def traversal(p, q):
            if not p and not q:
                return True
            if (not p or not q) or (p.val != q.val):
                return False
            return traversal(p.left, q.left) and traversal(p.right, q.right)
        
        return traversal(p, q)
