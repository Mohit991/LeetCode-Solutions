class Solution:
    memo = {}
    def findSteps(self, num):
        if num in self.memo:
            return self.memo[num]
        if num == 1:
            return 0
        if num%2 == 0:
            self.memo[num] = self.findSteps(num//2) + 1
            return self.memo[num]
        else:
            self.memo[num] = self.findSteps(num*3 + 1) + 1
            return self.memo[num]
    
    def getKth(self, lo: int, hi: int, k: int) -> int:
        powers = []
        for i in range(lo, hi + 1):
            powers.append([self.findSteps(i), i])
        powers.sort()
        return powers[k-1][1]
        
        # heap = []
        # for i in range(lo, hi + 1):
        #     heappush(heap, [self.findSteps(i), i])
        # while k != 1:
        #     heappop(heap)
        #     k -= 1
        # return heap[0][1]
