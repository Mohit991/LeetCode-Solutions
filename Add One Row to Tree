# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def addOneRow(self, root: Optional[TreeNode], val: int, depth: int) -> Optional[TreeNode]:
        if depth == 1:
            temp = TreeNode(val)
            temp.left = root
            root = temp 
            return root
        
        q = [root]
        levels = []
        level = 1
        while q and level < depth-1:
            lenOfQ = len(q)
            currLevel = []
            for i in range(lenOfQ):
                node = q.pop(0)
                currLevel.append(node.val)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            levels.append(currLevel)
            level += 1
        
        for node in q:
            left = node.left
            right = node.right
            node.left = TreeNode(val)
            node.left.left = left
            node.right = TreeNode(val)
            node.right.right = right
        return root
