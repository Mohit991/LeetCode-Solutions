# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

#Solution: Find the length. Subtract length and n. Go to the specific node and delete that.
#Two passes: Find length and then remove length - nth node. 

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        length = 0
        temp = head
        while temp:
            length += 1
            temp = temp.next
        
        deleteNode = length - n 
        
        temp = head
        prev = None
        while deleteNode != 0:
            deleteNode -= 1
            prev = temp
            temp = temp.next
        
        #We are looking to delete the head(first node) of the list
        if prev == None:
            head = head.next
        #Delete any other node.
        else:    
            prev.next = temp.next
        
        return head

#One Pass: A one pass solution can be done using pointers. Move one pointer ptr1 --> n+1 places forward, to maintain a gap of n between the two pointers and then move both. Finally, when the ptr1 pointer reaches the end, the ptr2 pointer will be n+1 places behind - just the right spot for it to be able to skip the next node.

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        ptr1, ptr2 = head, head
        
        while n > 0:
            ptr1 = ptr1.next
            n -= 1
        if not ptr1:
            head = head.next
            return head
        while ptr1.next:
            ptr1 = ptr1.next
            ptr2 = ptr2.next
        
        ptr2.next = ptr2.next.next
        return head
    
