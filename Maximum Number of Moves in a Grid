# Create a funtion dfs which will use dfs to explore the matrix. 
# Go in the given directions after checking the validity of the location. 
# Use a memo dict to remember the results of the cells you encounter. 

class Solution:
    def maxMoves(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        memo = {}
        
        def dfs(i, j):
            if (i, j) in memo:
                return memo[(i, j)]
            x, y, z = 0, 0, 0
            if i-1 >= 0 and j+1 < cols and grid[i-1][j+1] > grid[i][j]:
                x = dfs(i-1, j+1) + 1
            if j+1 < cols and grid[i][j+1] > grid[i][j]:
                y = dfs(i, j+1) + 1
            if i+1 < rows and j+1 < cols and grid[i+1][j+1] > grid[i][j]:
                z = dfs(i+1, j+1) + 1
            memo[(i, j)] = max(x, y, z)
            return max(x, y, z)
        
        moves = 0
        for i in range(rows):
            moves = max(moves, dfs(i, 0))
        return moves
            
        
