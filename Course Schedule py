class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # dfs
        preMap = {i: [] for i in range(numCourses)}

        # map each course to : prereq list
        for crs, pre in prerequisites:
            preMap[crs].append(pre)
        #we create a graph from the given prerequisites list
        
        visiting = set()
        #this set will contain all the notes encountered in the dfs search. 
        
        def dfs(crs):
            if crs in visiting:
                return False
            if preMap[crs] == []:
                return True

            visiting.add(crs)
            for pre in preMap[crs]:
                if not dfs(pre):
                    return False
            visiting.remove(crs)
            preMap[crs] = []
            return True

        for c in range(numCourses):
            #we have to apply the loop for all the possible values ie 0 to numCourses - 1
            #because graph can be disconnected.
            if not dfs(c):
                return False
        return True
