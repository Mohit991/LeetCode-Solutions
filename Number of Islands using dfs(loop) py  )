class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or not grid[0]:
            return 0
        islands = 0
        visited = set()
        row, col = len(grid), len(grid[0])
        def dfs(r, c):
            q = []
            q.append((r,c))
            # if r<0 or r>=row or c<0 or c>= col or grid[r][c] == "0" or (r,c) in visited:
            #     return
            
            while q:
                r,c = q.pop()
                if r not in range(row) or c not in range(col) or grid[r][c] == "0" or (r,c) in visited:
                    continue
                visited.add((r, c))
                q.append((r+1, c))
                q.append((r-1, c))
                q.append((r, c+1))
                q.append((r, c-1))
            
            
        for r in range(row):
            for c in range(col):
                if (r,c) not in visited and grid[r][c] == "1" :
                    islands += 1
                    dfs(r,c)
                    
        
        return islands
                    
            
            
