class Solution:
    def maximumPopulation(self, logs: List[List[int]]) -> int:
        population = [0] * 100
        for year in range(1950, 2051):
            for lifeSpan in logs:
                if year >= lifeSpan[0] and year < lifeSpan[1]:
                    population[year-1950] += 1
        maxPopulation = 0
        maxPopulationYear = 0
        for year in range(len(population)):
            if population[year] > maxPopulation:
                maxPopulation = population[year]
                maxPopulationYear = year + 1950
        return maxPopulationYear

# Suppose we are given the log [1950, 1961]
# This means birth year is 1950 and death year is 1961
# Therefore, years from 1950 to 1960 will be incremented by 1.

# We can do it by iterating from 1950 to 1960 but that will increase time complexity if we have to do it for every query in logs array.

# To do this in O(1), we increment year[1950] by 1 and decrement year[1961] by 1.
# We can reapeat this for every query in logs array.
# You can see that the Prefix Sum row will give the desired result as we have incremented the values of array from index 1950 to 1960.


class Solution:
    def maximumPopulation(self, logs: List[List[int]]) -> int:
        population = [0]*101
        for lifeSpan in logs:
            birth, death = lifeSpan[0], lifeSpan[1]
            population[birth-1950] += 1
            population[death-1950] -= 1
        
        prefixSum = 0
        maxSum = 0
        maxPopulationYear = 0
        for i in range(len(population)):
            prefixSum += population[i]
            if prefixSum > maxSum:
                prefixSum = maxSum
                maxPopulationYear = i
        return maxPopulationYear + 1950
        
            
            
