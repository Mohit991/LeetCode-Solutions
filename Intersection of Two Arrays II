class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        #To optimize the space, we should put smaller array of the two in the
        #map. 
        if len(nums1) > len(nums2): self.intersect(nums2, nums1)
        nums1Map = {}
        for n in nums1:
            if n in nums1Map:
                nums1Map[n] += 1
            else:
                nums1Map[n] = 1
        
        res = []
        for n in nums2:
            if n in nums1Map and nums1Map[n] != 0:
                res.append(n)
                nums1Map[n] -= 1
        return res
    
# Time: O(M + N), where M <= 1000 is length of nums1 array, N <= 1000 is length of nums2 array.
# Space: O(min(M, N))   

#####################################################
#When the arrays are already sorted

class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        nums2.sort()
        
        i, j = 0, 0
        res = []
        while i < len(nums1) and j < len(nums2):
            if nums1[i] == nums2[j]:
                res.append(nums1[i])
                i += 1
                j += 1
            elif nums1[i] < nums2[j]:
                i += 1
            else:
                j += 1
        return res

# Time: O(MlogM + NlogN), where M <= 1000 is length of nums1 array, N <= 1000 is length of nums2 array.
# Extra Space (without counting output as space): O(sorting)

########################################################################

# ✔️ Follow-up Question 1: What if the given array is already sorted? How would you optimize your algorithm?

# Approach 2 is the best choice since we skip the cost of sorting.
# So time complexity is O(M+N) and the space complexity is O(1).
# ✔️ Follow-up Question 2: What if nums1's size is small compared to nums2's size? Which algorithm is better?

# Approach 1 is the best choice.
# Time complexity is O(M+N) and the space complexity is O(M), where M is length of nums1, N is length of nums2.
# ✔️ Follow-up Question 3: What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?

# If nums1 fits into the memory, we can use Approach 1 which stores all elements of nums1 in the HashMap. Then, we can sequentially load and process nums2.
# If neither nums1 nor nums2 fits into the memory, we split the numeric range into numeric sub-ranges that fit into the memory.
# We modify Approach 1 to count only elements which belong to the given numeric sub-range.
# We process each numeric sub-ranges one by one, util we process all numeric sub-ranges.
# For example:
# Input constraint:
# 1 <= nums1.length, nums2.length <= 10^10.
# 0 <= nums1[i], nums2[i] < 10^5
# Our memory can store up to 1000 elements.
# Then we split numeric range into numeric sub-ranges [0...999], [1000...1999], ..., [99000...99999], then call Approach 1 to process 100 numeric sub-ranges.
