# int diff = the point from where the bits of left & right differ. 

# left  = 10110010 01001
# right = 10110010 11111
#                  ^----- diff
# _______________________
# ans   = 10110010 00000

# The bits of both the numbers are similar up until point diff.

# What does this mean?
# The Bitwise AND will remain for bits right from diff.

# and after diff point the AND for each bit will be 0.

# So, now all that we need is the point diff.

# This holds true for any example,

# left  = 000010
# right = 101000
#         ^------diff
# ______________
# ans   = 000000 


# left  = 10001
# right = 10001
#              ^---diff
# _____________
# ans   = 10001

# To compute the bitwise AND of all numbers in the range [left, right], you can iterate through the range and perform bitwise AND operation on all the numbers. However, there's a more efficient solution.

# The bitwise AND operation between two numbers results in a number where each bit is 1 if and only if the corresponding bits of both numbers are 1. When you're considering a range [left, right], if the two numbers have different bits in any position, then the result of the AND operation will have a 0 in that position. So, you only need to find the common prefix of the binary representation of left and right.

# The approach used in the code is to find the common prefix of the binary representations of left and right. Since we're performing a bitwise AND operation, any bits that differ between left and right will be set to 0 in the result.

# Here's how the code works with an example:

# Let's take left = 5 and right = 7.

# Convert left and right to binary:

# left = 5 in binary is 101.
# right = 7 in binary is 111.
# Now, we iterate through a loop until left becomes greater than or equal to right.

# In the first iteration:
# left = 101 >> 1 becomes 10 (which is 2 in decimal).
# right = 111 >> 1 becomes 11 (which is 3 in decimal).
# shift becomes 1.
# In the second iteration:
# left = 10 >> 1 becomes 1 (which is 1 in decimal).
# right = 11 >> 1 becomes 1 (which is 1 in decimal).
# shift becomes 2.
# Now, left is equal to right and we exit the loop.

# Finally, we left-shift left by shift bits and return the result:

# left << shift becomes 1 << 2 which is 100 (which is 4 in decimal).
# So, the bitwise AND of all numbers in the range [5, 7] is 4.

class Solution:
    def rangeBitwiseAnd(self, left: int, right: int) -> int:
        rightShifts = 0
        while left != right:
            left >>= 1
            right >>= 1
            rightShifts += 1
        
        left <<= rightShifts
        return left
