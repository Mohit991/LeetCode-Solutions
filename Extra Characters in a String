# Recursive Approch with Memoization

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        def find(s, memo):
            if s in memo:
                return memo[s]
            if not s:
                return 0
            extra1, extra2 = inf, inf
            for word in dictionary:
                if word == s[:len(word)]:
                    extra1 = min(extra1, find(s[len(word):], memo))
            extra2 = find(s[1:], memo) + 1 
            memo[s] = min(extra1, extra2)
            return memo[s]
        
        return find(s, {})
    
###########################################################################

# Bottom up approch

class Solution:
    def minExtraChar(self, s: str, dictionary: List[str]) -> int:
        dp = [0] + [inf] * (len(s))
        wordSet = set(dictionary)
        
        for i in range(1, len(s)+1):
            dp[i] = dp[i-1] + 1
            for j in range(0, i):
                if s[j:i] in wordSet:
                    dp[i] = min(dp[i], dp[j])
        return dp[-1]
    

                
