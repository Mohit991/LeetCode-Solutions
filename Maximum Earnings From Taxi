# Approach 1: DP
# Time:  O(n + m), m = len of rides. 
# Space: O(m)

# Intuition: 
# We want to loop from location = 1 to n and at each step check if this location is an end point or not.
# If it is an end point then we check all of its corresponding start points and get the maximum fare we can earn.
# In order to quickly check if this number is an end point or not maintain a hashmap where keys="end point" and the values="[start_point, tip]""

class Solution:
    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
        rideEndAt = defaultdict(list)
        for ride in rides:
            start, end, tip = ride
            rideEndAt[end].append([start, tip])
        
        dp = [0] * (n+1)
        for location in range(n+1):
        # taxi driver has the fare from the previous location, let's see if he/she              can make more money by dropping someone at the current location
        # we check that by checking if the current location is an end point, among              the ones gathered as hashmap keys
            maxProfit = 0
            for start, tip in rideEndAt[location]:
                # for each ending trip at the current 'location'
                maxProfit = max(maxProfit, location-start+tip + dp[start])
            #max profit is either whatever we can get by taking this rides.
            #this value we can get from maxProfit we just calculated. 
            #Another option we have is by not taking this ride at all.
            #In that case we will just take the profit we have so far till last loc. 
            #We will take the max profit out of these two. 
            dp[location] = max(maxProfit, dp[location-1])
        
        return dp[-1]
        
