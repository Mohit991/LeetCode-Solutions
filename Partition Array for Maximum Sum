class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        def findSum(i):
            if i >= len(arr):
                return 0
            
            maxVal = 0
            maxSum = 0
            for j in range(i, min(len(arr), i+k)):
                maxVal = max(maxVal, arr[j])
                maxSum = max(maxSum, maxVal * (j-i+1) + findSum(j+1))
            return maxSum
                
        return findSum(0)
           
        
class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        memo = {}
        def findSum(i):
            if i in memo:
                return memo[i]
            if i >= len(arr):
                return 0
            
            maxVal = 0
            maxSum = 0
            for j in range(i, min(len(arr), i+k)):
                maxVal = max(maxVal, arr[j])
                maxSum = max(maxSum, maxVal * (j-i+1) + findSum(j+1))
            memo[i] = maxSum
            return memo[i]
                
        return findSum(0)
