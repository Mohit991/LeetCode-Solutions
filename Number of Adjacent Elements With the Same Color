# Just think when new element is added to nums then there will be two case (nums is our final array of length n that has intially all values is equal to 0) :

# case 1: nums[i]==0 (where 0<=i<n) then check its both side

# if new element that we want to insert in nums[i] is equal to nums[i-1]    then do cnt++ (bcoz it will contribute in our answer).
# if new element that we want to insert  in nums[i] is equal to nums[i+1]   then do cnt++.
# case 2 : nums[i]!=0 (where 0<=i<n) then there will be 4 conditions


# if element that is already present in nums[i] is equal to nums[i-1] then we have to do cnt-- (bcoz this element is no more contributing after inserting new element)
# if element that is already present in nums[i] is equal to nums[i+1] then we have to do again cnt-- (bcoz this element is no more contributing after inserting new element)
# if new element that we want to insert  in nums[i] is equal to nums[i-1]   then do cnt++.
# if new element that we want to insert  in nums[i] is equal to nums[i+1]   then do cnt++.`

# Complexity
# Time complexity: O(n)
    
class Solution:
    def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:
        array = [0] * (n+1)
        adj = 0
        ans = []
        for index, color in queries:
            if array[index] == 0:
                array[index] = color
                if index > 0 and array[index-1] == array[index]:
                    adj += 1
                if index < n-1 and array[index+1] == array[index]:
                    adj += 1
            else:
                if index > 0 and array[index-1] == array[index]:
                    adj -= 1
                if index < n-1 and array[index+1] == array[index]:
                    adj -= 1

                array[index] = color
                if index > 0 and array[index-1] == array[index]:
                    adj += 1
                if index < n-1 and array[index+1] == array[index]:
                    adj += 1
            ans.append(adj)
        
        return ans
            
            
