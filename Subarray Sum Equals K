# We need to find all the subarrays whose sum is equal to k. 
# We can use prefix sums to find the result. 
# We will create a map to store the prefix sum at every index in the array. 
# Also, We will put sum 0 = 1 because empty array has a sum of 0. 

# As we move in the array from left to right, we calculate the prefix sum, 
# prefix sum is the sum of elements from 0-ith index. 
# In the map, we will search for a sum of sum - k, because if there exists an 
# array having prefix sum as sum - k, then the remaining array from that point to 
# current point will have a sum of k. However many times we have seen sum-k 
# that many times we will find k summed arrays because those many subarrays can be
# removed to get the sum as k. So, we add that to count.

# So, suppose we have an array as arr[]: [1,2,3,4,5] and k = 9

# so, our answer will be '2' i.e (2 + 3 + 4 and 4 + 5)
# so if we store our prefix sum array then it should looks like:
# index :   0, 1, 2, 3,  4
#   arr[]: [1, 2, 3, 4,  5]
# prefix[]:[1, 3, 6, 10, 15]
#           ↑         ↑

# How, we will find our subarray (2 + 3 + 4) using prefix sum, see-

# 1) if we see our prefix sum at index 3 then it is 10 and also prefix sum at index 0
# is 1
# so, we can say that from index 0 to 3 our prefix sum increases from 1 to 10, right,

# 2) So on putting a question, HOW MUCH ? means how much our sum increase from index
# 0 to index 3
# then, we simply say, we find the difference between these two sums i.e (10 - 1) is 
# the sum that increases from index 0 to 3.

# 3) If (10 - 1) sum increases from index 0 to 3, then we can say that, ok, this 
# difference, should be the sum of elements greater than index 0, and upto index 3,
# i.e from index 1 to index 3,right.

# 4) Now, if we will see then we find out (10 - 1) is nothing but our 'k' that is 9.


# 5) So, we find out, that a subarray may also exist if this particular condition satisified, i.e
#     (prefix[i] - k) should exist in our map, 
	
# 	How? see,
	
# 	If prefix[i] - prefix[j] = k where i > j 
# (i, j any index, in our case they are i = 3, j = 0)
# 	prefix[i] - k = prefix[j] na, (simple maths)
	
# 	i.e if we are able to find (prefix[i] - k) is exist in our map, i.e prefix[j]
# 	so, we can say that from index j + 1 to i, the sum of the elements is k, 
# right na,
# 	hence it proves that their exist an subarray from index j + 1 to i 
# whose sum is k.

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        prefixSum = {0:1}
        count = 0
        sum = 0
        for n in nums:
            sum += n
            if sum-k in prefixSum:
                count += prefixSum[sum-k]
            if sum in prefixSum:
                prefixSum[sum] += 1
            else:
                prefixSum[sum] = 1
        return count
