# Brute force solution, traverse string s 2 times. 
# First time, store counts of every character into the hash table, 
# second time, find the first character that appears only once.

class Solution:
    def firstUniqChar(self, s: str) -> int:
        memo = {}
        for char in s:
            if char in memo:
                memo[char] += 1
            else:
                memo[char] = 1
        
        for i in range(len(s)):
            if memo[s[i]] == 1:
                return i
        return -1
    
# if the string is extremely long, we wouldn't want to traverse it twice,
# so instead only storing just counts of a char, we also store the index, 
# and then traverse the hash table.
class Solution:
    def firstUniqChar(self, s: str) -> int:
        memo = defaultdict(list)
        for i in range(len(s)):
            char = s[i]
            if char in memo:
                memo[char][0] += 1
            else:
                memo[char].append(1)
                memo[char].append(i)
        
        for char in memo:
            if memo[char][0] == 1:
                return memo[char][1]
        return -1

# If the string is very long, it is a bad idea to traverse it twice.
#So, we will only traverse it once. We use a dictionary called memo
# to store the index of non-repeating character. 
# We go through the string. If we have seen the char before, we put inf as index.
# If we have not seen the char before we put its index as value in memo.
# Now, after scanning the whole string, only non-repeating chars have their 
# indexes stored in the memo. 
# We go through the memo and find the minimum out of all these indexes. 

class Solution:
    def firstUniqChar(self, s: str) -> int:
        memo = {}
        for i in range(len(s)):
            if s[i] in memo:
                memo[s[i]] = inf
            else:
                memo[s[i]] = i
        
        minIndex = inf
        for char in memo:
            minIndex = min(minIndex, memo[char])
        return minIndex if minIndex != inf else -1
        
        
