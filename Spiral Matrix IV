# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# Step 1: Create a n*n matrix and initilise all the values with 0(can be anything)
# Step 2: Use four variables left, right, top and bottom. Initlise them to appropriate values. 
# Step 3: Fill the rows and cols in spiral order. First row and last col then last row then first col and so on. Use these four variables to do it correctly. 


class Solution:
    def spiralMatrix(self, m: int, n: int, head: Optional[ListNode]) -> List[List[int]]:
        matrix = [[0 for i in range(n)] for i in range(m)]
        left, right = 0, n
        top, bottom = 0, m
        temp = head
        
        while left < right and top < bottom:
            for i in range(left, right):
                if not temp:
                    matrix[top][i] = -1
                else:
                    val = temp.val
                    temp = temp.next
                    matrix[top][i] = val
            top += 1
            
            for i in range(top, bottom):
                if not temp:
                    matrix[i][right - 1] = -1
                else:
                    val = temp.val
                    temp = temp.next
                    matrix[i][right - 1] = val
            right -= 1
            
            if left >= right or top >= bottom:
                break
                
            for i in range(right - 1, left - 1, -1):
                if not temp:
                    matrix[bottom - 1][i] = -1
                else:
                    val = temp.val
                    temp = temp.next
                    matrix[bottom - 1][i] = val
            bottom -= 1
            
            for i in range(bottom - 1, top - 1, -1):
                if not temp:
                    matrix[i][left] = -1
                else:
                    val = temp.val
                    temp = temp.next
                    matrix[i][left] = val
            left += 1
            
        return matrix
            
