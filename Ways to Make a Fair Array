# We can easily guess the two cornor cases ie if nums has only 1 element then we 
# return 1 because when we remove that one element odd and even sum will be 0, which is 
# equal. 

# Also, when we have only two elements then there will be no indexes which can be removed 
# because when we remove index 0, evenSum is nonzero and odd sum is zero. 
# Same can be applied when we remove the index 1. 

# Now to solve this we will precomputer prefix sums at odd and even indexes. 
# We computer prefix sum at even and odd indexes from the right. 
# We also compute prefix sum at even and odd indexes from the left.
# Now we can write cases for 0th and last index.

# As we go through the indexes, at every index, values to its left will not change index,
# which means that to the left odd and even sum will be same. 
# But to the right odd and even sum will reverse because when we remove the current index,
# all the next indexes are shifted by 1, hence odd indexes become even and even indexes 
# become odd. We can use this property to get to get the answer. 

class Solution:
    def waysToMakeFair(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return 1
        if len(nums) == 2:
            return 0 
        
        toTheLeftEven, toTheLeftOdd = [], []
        evenSum, oddSum = 0, 0
        for i in range(len(nums)):
            if i%2 == 0:
                evenSum += nums[i]
            else:
                oddSum += nums[i]
            toTheLeftEven.append(evenSum)
            toTheLeftOdd.append(oddSum)
        
        toTheRightEven, toTheRightOdd = [], []
        evenSum, oddSum = 0, 0
        for i in range(len(nums)-1, -1, -1):
            if i%2 == 0:
                evenSum += nums[i]
            else:
                oddSum += nums[i]
            toTheRightEven.append(evenSum)
            toTheRightOdd.append(oddSum)
        
        toTheRightEven.reverse()
        toTheRightOdd.reverse()

        count = 0
        if toTheRightEven[1] == toTheRightOdd[1]: #first index ie index = 0
            count += 1
        if toTheLeftEven[-2] == toTheLeftOdd[-2]: #Last index ie index = last
            count += 1

        for i in range(1, len(nums)-1):
            oddSum, evenSum = 0, 0
            oddSum = toTheLeftOdd[i-1]
            evenSum = toTheLeftEven[i-1]
            oddSum += toTheRightEven[i+1]
            evenSum += toTheRightOdd[i+1]
            if evenSum == oddSum:
                count += 1
        return count
                
############################################################################
# Suffix Sum

# Intuition:

# If we remove A[i], then the parity of the indexes greater than i are all changed (even becomes odd and vice versa).

# [ left part ] A[i] [ right part ]
# We can get the sum of even/odd numbers in the right part using the precomputed suffix sum, and get the sum of even/odd numbers in the left part by calculating prefix sum.

# Algorithm:

# Let e[i]/o[i] be the (suffix) sum of all even/odd numbers with index greater than and equal to i.

# We precompute e[i] and o[i] first.

# Then we can scan from left to right and compute the prefix sum of all even/odd numbers with indexes smaller than i on the fly, and save them in even and odd.

# If we remove A[i], then the sum of all the even numbers is even + o[i + 1], and the sum of all odd numbers is odd + e[i + 1].

# We can compute the suffix sums on the fly as well to save the extra space


class Solution:
    def waysToMakeFair(self, nums: List[int]) -> int:
        toTheLeftOdd, toTheLeftEven, toTheRightOdd, toTheRightEven = 0, 0, 0, 0
        count = 0
        
        for i in range(len(nums)):
            if i%2 == 0:
                toTheRightEven += nums[i]
            else:
                toTheRightOdd += nums[i]
        
        for i in range(len(nums)):
            if i%2 == 0:
                toTheRightEven -= nums[i]
            else:
                toTheRightOdd -= nums[i]
                
            if toTheLeftEven + toTheRightOdd == toTheLeftOdd + toTheRightEven:
                count += 1
                
            if i%2 == 0:
                toTheLeftEven += nums[i]
            else:
                toTheLeftOdd += nums[i]          
                
        return count
            
        
        
