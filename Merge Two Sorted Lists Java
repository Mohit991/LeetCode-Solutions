/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list2 == null && list1 == null) return null;
        if(list1 == null) return list2; 
        if(list2 == null) return list1;
        
        ListNode newNode =  new ListNode();
        ListNode prevNode = newNode;
        ListNode head = newNode;
        if(list1.val>list2.val){
            newNode.val = list2.val;
            list2 = list2.next;
        }
        else{
            newNode.val = list1.val;
            list1 = list1.next;
        }
    
        while(list1 != null && list2 != null){
            ListNode newNode1 =  new ListNode();
            if(list1.val>list2.val){
                newNode1.val = list2.val;
                prevNode.next = newNode1;
                prevNode = newNode1; 
                list2 = list2.next;
            }
            else{
                newNode1.val = list1.val;
                prevNode.next = newNode1;
                 prevNode = newNode1;
                list1 = list1.next;
            }
        }
        
        if(list1!=null){
            prevNode.next = list1;
        }
        if(list2!=null){
            prevNode.next = list2;
        }
        return head; 
    }
}
