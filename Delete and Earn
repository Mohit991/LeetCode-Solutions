# The problem can be reduced to house robber II. 
# https://leetcode.com/problems/house-robber-ii/

# You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

# Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        
        maxVal = max(nums)
        bucket = [0] * (maxVal + 1)
        for n in nums:
            bucket[n] += n
        
        dp = [0] * (maxVal + 1)
        dp[0] = bucket[0]
        dp[1] = bucket[1]
        
        for i in range(2, len(dp)):
            dp[i] = max(bucket[i] + dp[i-2], dp[i-1])
            
        return dp[-1]
